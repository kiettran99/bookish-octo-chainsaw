@page "/movies/search"
@using System.Globalization
@using CineReview.Components.Shared
@using CineReview.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IMovieDataProvider MovieDataProvider
@inject NavigationManager NavigationManager

<Microsoft.AspNetCore.Components.Web.PageTitle>Tìm phim | CineReview</Microsoft.AspNetCore.Components.Web.PageTitle>

@if (_isLoading)
{
    <section class="container-xl py-5 my-5 text-center">
        <div class="spinner-border text-info" role="status"></div>
    </section>
}
else if (_searchResult is null)
{
    <section class="container-xl py-5 my-5 text-center">
        <h1 class="display-5 text-white mb-3">Không thể tải dữ liệu</h1>
        <p class="text-secondary mb-4">Hệ thống tạm thời không thể lấy dữ liệu từ máy chủ. Vui lòng thử lại sau ít phút.</p>
        <a class="btn btn-outline-info" href="/">Quay lại trang chủ</a>
    </section>
}
else
{
    <section class="container-xl py-5 my-4">
        <div class="row g-4">
            <div class="col-12">
                <aside class="filters-card rounded-4 border border-secondary-subtle p-4 shadow-sm w-100" aria-label="Bộ lọc tìm phim">
                    <h2 class="h5 text-white mb-3">Bộ lọc</h2>
                    <form method="get" action="/movies/search" class="filters-form">
                        <div class="row g-3">
                            <div class="col-12 col-md-6">
                                <label for="query" class="form-label text-secondary small">Từ khóa</label>
                                <input type="search" id="query" name="query" class="form-control form-control-sm" value="@Query" placeholder="Tên phim, diễn viên..." maxlength="100" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="genre" class="form-label text-secondary small">Thể loại</label>
                                <select id="genre" name="genre" class="form-select form-select-sm">
                                    <option value="">Tất cả thể loại</option>
                                    @foreach (var option in _searchResult.Genres)
                                    {
                                        <option value="@option.Value" selected="@(string.Equals(option.Value, Genre, StringComparison.OrdinalIgnoreCase) ? "selected" : null)">@option.Label</option>
                                    }
                                </select>
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="from" class="form-label text-secondary small">Ngày phát hành từ</label>
                                <input type="date" id="from" class="form-control form-control-sm" name="from" value="@FormatDate(ReleaseFrom)" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="to" class="form-label text-secondary small">Ngày phát hành đến</label>
                                <input type="date" id="to" class="form-control form-control-sm" name="to" value="@FormatDate(ReleaseTo)" />
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="minScore" class="form-label text-secondary small">Điểm tối thiểu</label>
                                <select id="minScore" name="minScore" class="form-select form-select-sm">
                                    <option value="">Tất cả điểm</option>
                                    @foreach (var score in GetScoreOptions())
                                    {
                                        <option value="@score.ToString("0.0", CultureInfo.InvariantCulture)" selected="@(MinScore.HasValue && Math.Abs(MinScore.Value - score) < 0.01 ? "selected" : null)">@score.ToString("0.0", CultureInfo.InvariantCulture)+</option>
                                    }
                                </select>
                            </div>
                            <div class="col-12 col-md-6">
                                <label for="region" class="form-label text-secondary small">Quốc gia</label>
                                <select id="region" name="region" class="form-select form-select-sm">
                                    <option value="">Tất cả quốc gia</option>
                                    @foreach (var regionOption in GetPopularRegions())
                                    {
                                        <option value="@regionOption.Value" selected="@(string.Equals(regionOption.Value, Region, StringComparison.OrdinalIgnoreCase) ? "selected" : null)">@regionOption.Label</option>
                                    }
                                </select>
                            </div>
                            <div class="col-12">
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary btn-sm flex-fill">Tìm kiếm</button>
                                    <a class="btn btn-outline-secondary btn-sm flex-fill" href="/movies/search">Xóa lọc</a>
                                </div>
                            </div>
                        </div>
                    </form>
                </aside>
            </div>
            <div class="col-12">
                <div class="search-results-panel rounded-4 border border-secondary-subtle p-4 shadow-sm">
                    <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center gap-3 mb-4">
                        <div>
                            <p class="text-secondary text-uppercase small fw-semibold mb-2">Trang @_searchResult.Page.Page/@_searchResult.Page.TotalPages · @_searchResult.Page.TotalResults kết quả</p>
                            <h1 class="display-5 fw-bold text-white mb-2">@_searchResult.Page.Title</h1>
                            <p class="text-secondary mb-0">@_searchResult.Page.Description</p>
                        </div>
                        <a class="btn btn-ghost" href="/">Quay lại trang chủ</a>
                    </div>

                    @if (_searchResult.Page.Items.Count == 0)
                    {
                        <div class="alert alert-info bg-info-subtle border-info-subtle text-info-emphasis" role="alert">
                            Không tìm thấy phim nào phù hợp với tiêu chí hiện tại. Hãy thử thay đổi bộ lọc hoặc nhập từ khóa khác.
                        </div>
                    }
                    else
                    {
                        <div class="row g-4">
                            @foreach (var movie in _searchResult.Page.Items)
                            {
                                <div class="col-12 col-sm-6 col-lg-4 col-xl-3">
                                    <CineReview.Components.Shared.MovieCard Movie="movie" />
                                </div>
                            }
                        </div>

                        @if (_searchResult.Page.TotalPages > 1)
                        {
                            <nav class="mt-5" aria-label="Phân trang kết quả tìm kiếm">
                                <ul class="pagination justify-content-center">
                                    <li class="page-item @(_searchResult.Page.Page <= 1 ? "disabled" : null)">
                                        <a class="page-link" href="@BuildPageUrl(_searchResult.Page.Page - 1)" aria-label="Trang trước">&lsaquo;</a>
                                    </li>
                                    @foreach (var pageNumber in GetPageNumbers(_searchResult.Page.Page, _searchResult.Page.TotalPages))
                                    {
                                        <li class="page-item @(pageNumber == _searchResult.Page.Page ? "active" : null)">
                                            <a class="page-link" href="@BuildPageUrl(pageNumber)">@pageNumber</a>
                                        </li>
                                    }
                                    <li class="page-item @(_searchResult.Page.Page >= _searchResult.Page.TotalPages ? "disabled" : null)">
                                        <a class="page-link" href="@BuildPageUrl(_searchResult.Page.Page + 1)" aria-label="Trang sau">&rsaquo;</a>
                                    </li>
                                </ul>
                            </nav>
                        }
                    }
                </div>
            </div>
        </div>
    </section>
}

@code {
    [SupplyParameterFromQuery(Name = "query")]
    public string? Query { get; set; }

    [SupplyParameterFromQuery(Name = "genre")]
    public string? Genre { get; set; }

    [SupplyParameterFromQuery(Name = "from")]
    public DateTime? ReleaseFrom { get; set; }

    [SupplyParameterFromQuery(Name = "to")]
    public DateTime? ReleaseTo { get; set; }

    [SupplyParameterFromQuery(Name = "minScore")]
    public double? MinScore { get; set; }

    [SupplyParameterFromQuery(Name = "region")]
    public string? Region { get; set; }

    [SupplyParameterFromQuery(Name = "page")]
    public int Page { get; set; } = 1;

    private MovieSearchResult? _searchResult;
    private bool _isLoading;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        try
        {
            var sanitizedPage = Page < 1 ? 1 : Page;
            var criteria = new MovieSearchRequest(
                Query,
                sanitizedPage,
                Genre,
                ReleaseFrom,
                ReleaseTo,
                MinScore,
                Region);

            _searchResult = await MovieDataProvider.SearchMoviesAsync(criteria);

            if (_searchResult.Page.TotalResults > 0 && sanitizedPage > _searchResult.Page.TotalPages && _searchResult.Page.TotalPages > 0)
            {
                NavigationManager.NavigateTo(BuildPageUrl(_searchResult.Page.TotalPages), replace: true);
            }
        }
        finally
        {
            _isLoading = false;
        }
    }

    private static IEnumerable<int> GetPageNumbers(int current, int total)
    {
        const int window = 5;
        var start = Math.Max(1, current - 2);
        var end = Math.Min(total, start + window - 1);
        start = Math.Max(1, end - window + 1);

        for (var page = start; page <= end; page++)
        {
            yield return page;
        }
    }

    private string BuildPageUrl(int page)
    {
        var parameters = new Dictionary<string, object?>();
        if (!string.IsNullOrWhiteSpace(Query))
        {
            parameters["query"] = Query;
        }

        if (!string.IsNullOrWhiteSpace(Genre))
        {
            parameters["genre"] = Genre;
        }

        if (ReleaseFrom.HasValue)
        {
            parameters["from"] = ReleaseFrom.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        }

        if (ReleaseTo.HasValue)
        {
            parameters["to"] = ReleaseTo.Value.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
        }

        if (MinScore.HasValue)
        {
            parameters["minScore"] = MinScore.Value.ToString("0.0", CultureInfo.InvariantCulture);
        }

        if (!string.IsNullOrWhiteSpace(Region))
        {
            parameters["region"] = Region;
        }

        if (page > 1)
        {
            parameters["page"] = page;
        }

        return NavigationManager.GetUriWithQueryParameters("/movies/search", parameters);
    }

    private static string? FormatDate(DateTime? value)
        => value?.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);

    private static string? FormatScore(double? value)
        => value.HasValue ? value.Value.ToString("0.0", CultureInfo.InvariantCulture) : null;

    private static IEnumerable<double> GetScoreOptions()
    {
        for (var score = 0.5; score <= 10.0; score += 0.5)
        {
            yield return score;
        }
    }

    private static IEnumerable<(string Value, string Label)> GetPopularRegions()
    {
        return new[]
        {
            ("VN", "Việt Nam"),
            ("US", "Hoa Kỳ"),
            ("KR", "Hàn Quốc"),
            ("JP", "Nhật Bản"),
            ("CN", "Trung Quốc"),
            ("GB", "Vương quốc Anh"),
            ("FR", "Pháp"),
            ("IN", "Ấn Độ"),
            ("TH", "Thái Lan"),
            ("HK", "Hồng Kông")
        };
    }
}
